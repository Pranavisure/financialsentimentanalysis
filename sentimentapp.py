# -*- coding: utf-8 -*-
"""sentimentapp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ib1gSUihfLeRXz13u0sgmNvPG2ltdH-s
"""

import string
import nltk
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.preprocessing import FunctionTransformer
import streamlit as st
import pickle


# Define the preprocessing function
def preprocess(sentences):
    preprocessed_sentences = []
    lemmatizer = WordNetLemmatizer()
    stop_words = set(stopwords.words('english'))
    for sentence in sentences:
        # Remove punctuation and lowercase the sentence
        sentence = sentence.translate(str.maketrans('', '', string.punctuation))
        sentence = sentence.lower()
        # Tokenize the sentence
        tokens = word_tokenize(sentence)
        # Remove stop words and lemmatize the tokens
        lemmas = [lemmatizer.lemmatize(token) for token in tokens if token not in stop_words]
        # Join the lemmas back into a single string
        preprocessed_sentence = " ".join(lemmas)
        preprocessed_sentences.append(preprocessed_sentence)
    return preprocessed_sentences

# Define the SVM model and TF-IDF vectorizer as separate steps in the pipeline
svm_model = SVC(kernel='linear', C=1.0, random_state=42)
tfidf_vectorizer = TfidfVectorizer()

# Define the pipeline
pipeline = Pipeline([
    ('preprocessor', FunctionTransformer(preprocess, validate=False)),
    ('tfidf', tfidf_vectorizer),
    ('svm', svm_model)
])

# Load the saved pipeline model
model = pickle.load(open('pipeline.pkl', 'rb'))

# Define the Streamlit app
def app():
    st.title('Financial Sentiment Analysis')
    text_input = st.text_input('Enter some text to classify')
    if st.button('Classify'):
        # Use the pipeline to make a prediction on the input text
        prediction = model.predict([text_input])
        st.write(f'Prediction: {prediction[0]}')


if __name__ == '__main__':
    app()
